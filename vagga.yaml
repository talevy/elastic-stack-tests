containers:
  java8:
    setup:
    - !UbuntuRelease { version: 15.04 }
    - !Env
      JAVA_VERSION: 8
      JAVA_UPDATE: 74
      JAVA_BUILD: 02
      JAVA_HOME: "/usr/lib/jvm/java-8-oracle"
    - !BuildDeps [wget, ca-certificates]
    - !Sh |
        cd "/tmp"
        wget --header "Cookie: oraclelicense=accept-securebackup-cookie;" \
          "http://download.oracle.com/otn-pub/java/jdk/${JAVA_VERSION}u${JAVA_UPDATE}-b${JAVA_BUILD}/jdk-${JAVA_VERSION}u${JAVA_UPDATE}-linux-x64.tar.gz"
        tar -xzf "jdk-${JAVA_VERSION}u${JAVA_UPDATE}-linux-x64.tar.gz"
        mkdir -p "/usr/lib/jvm"
        mv "/tmp/jdk1.${JAVA_VERSION}.0_${JAVA_UPDATE}" "${JAVA_HOME}"
        rm -rf "$JAVA_HOME/"*src.zip
        rm -rf "$JAVA_HOME/lib/missioncontrol" \
           "$JAVA_HOME/lib/visualvm" \
           "$JAVA_HOME/lib/"*javafx* \
           "$JAVA_HOME/jre/lib/plugin.jar" \
           "$JAVA_HOME/jre/lib/ext/jfxrt.jar" \
           "$JAVA_HOME/jre/bin/javaws" \
           "$JAVA_HOME/jre/lib/javaws.jar" \
           "$JAVA_HOME/jre/lib/desktop" \
           "$JAVA_HOME/jre/plugin" \
           "$JAVA_HOME/jre/lib/"deploy* \
           "$JAVA_HOME/jre/lib/"*javafx* \
           "$JAVA_HOME/jre/lib/"*jfx* \
           "$JAVA_HOME/jre/lib/amd64/libdecora_sse.so" \
           "$JAVA_HOME/jre/lib/amd64/"libprism_*.so \
           "$JAVA_HOME/jre/lib/amd64/libfxplugins.so" \
           "$JAVA_HOME/jre/lib/amd64/libglass.so" \
           "$JAVA_HOME/jre/lib/amd64/libgstreamer-lite.so" \
           "$JAVA_HOME/jre/lib/amd64/"libjavafx*.so \
           "$JAVA_HOME/jre/lib/amd64/"libjfx*.so
        rm "/tmp/"*
        echo "export JAVA_HOME=/usr/lib/jvm/java-8-oracle" >> /etc/profile
  
  zookeeper:
    environ:
      PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/zookeeper/bin"
      JAVA_HOME: "/usr/lib/jvm/java-8-oracle"
    setup:
      - !Container java8
      - !Install [bash]
      - !Tar
        url: http://mirror.cc.columbia.edu/pub/software/apache/zookeeper/zookeeper-3.4.8/zookeeper-3.4.8.tar.gz
        path: /opt/zookeeper
        subdir: zookeeper-3.4.8
      - !Sh |
          ln -snf /work/config/zookeeper.cfg /opt/zookeeper/conf/zoo.cfg
    volumes:
      /tmp: !Tmpfs {size: 100Mi}

  kafka:
    environ:
      PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/kafka/bin"
      LOG_DIR: "/broker-logs"
      JAVA_HOME: "/usr/lib/jvm/java-8-oracle"
    setup:
      - !Container java8
      - !EnsureDir /kafka-logs
      - !EnsureDir /broker-logs
      - !Tar
        url: http://mirrors.koehn.com/apache/kafka/0.8.2.2/kafka_2.11-0.8.2.2.tgz
        path: /opt/kafka
        subdir: kafka_2.11-0.8.2.2
    volumes:
      /kafka-logs: !BindRW /work/kafka-logs
      /broker-logs: !Tmpfs { size: 10Mi }

  elasticsearch:
    environ:
      JAVA_HOME: "/usr/lib/jvm/java-8-oracle"
    setup:
    - !Container java8
    - !Tar
      url: https://download.elasticsearch.org/elasticsearch/release/org/elasticsearch/distribution/tar/elasticsearch/2.2.0/elasticsearch-2.2.0.tar.gz
      path: /usr/share/
    - !EnsureDir /eshome
    - !Sh |
        mkdir -p /work/es-home/config
        cp /usr/share/elasticsearch-2.2.0/config/logging.yml /work/es-home/config
    volumes:
      /eshome: !BindRW /work/es-home

  logstash:
    environ:
      PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/lib/jvm/java-8-oracle/bin"
      JAVA_HOME: "/usr/lib/jvm/java-8-oracle"
    setup:
    - !Container java8
    - !Install [python3-requests]
    - !PipConfig
      dependencies: true
    - !Py3Install [pykafka, elasticsearch]
    - !Tar
      url: https://download.elastic.co/logstash/logstash/logstash-2.2.2.tar.gz
      path: /usr/share
    - !Sh |
        cat /work/hosts > /etc/hosts
    - !Sh |
        /usr/share/logstash-2.2.2/bin/plugin install logstash-codec-avro

  ruby:
    setup:
    - !UbuntuRelease { version: 15.04 }
    - !UbuntuUniverse
    - !Install [build-essential, ruby, automake, autoconf, libtool, make, ruby-dev, curl]
    - !Sh |
        gem install avro --no-rdoc --no-ri
        gem install poseidon --no-rdoc --no-ri

commands:
  test: !Supervise
    description: Run Logstash - Kafka - Avro Test
    children:
      zookeeper: !Command
        container: zookeeper 
        network:
          ip: 172.18.0.1
        run: |
          zkServer.sh start-foreground >/work/.zookeeper.log 2>&1

      kafka: !Command
        container: kafka
        network:
          ip: 172.18.0.2
        run: |
          trap 'rm -rf /work/kafka-logs/*' EXIT TERM INT
          trap 'kill -TERM $PID' EXIT TERM INT
          kafka-server-start.sh /work/config/kafka.properties >/work/.kafka.log 2>&1 &
          PID=$!
          sleep 3
          kafka-topics.sh --create --partitions 4 --replication-factor 1 --topic avro_meet_kafka --zookeeper zookeeper:2181
          wait $PID

      elasticsearch: !Command
        container: elasticsearch
        network:
          ip: 172.18.0.3
        user-id: 1000
        external-user-id: 0
        run: |
          rm -rf /work/es-home/data
          /usr/share/elasticsearch-2.2.0/bin/elasticsearch --network.host 172.18.0.3 --path.home=/eshome >/work/.es.log 2>&1

      logstash: !Command
        container: logstash
        network:
          ip: 172.18.0.4
        run: |
          rm -f /work/logstash.out
          /usr/share/logstash-2.2.2/bin/logstash -f /work/logstash.conf > /work/logstash.out 2>/dev/null
          rm -f /work/logstash.out

      rubyrunner: !BridgeCommand
        container: ruby
        run: |
          ruby /work/publish_tweets.rb
          cat

      assert: !BridgeCommand
        container: logstash
        run: |
          python3 /work/test.py
